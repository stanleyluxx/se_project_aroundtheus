!function(){"use strict";class t{constructor(t,e,s){this._name=t.name,this._link=t.link,this._cardSelector=e,this._handleImageClick=s,this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button")}_setEventListeners(){this._likeButton.addEventListener("click",t=>{t.stopPropagation(),this._handleLikeIcon()}),this._deleteButton.addEventListener("click",t=>{t.stopPropagation(),this._handleDeleteCard()}),this._cardElement.addEventListener("click",()=>{this._handleImageClick(this._name,this._link)})}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_active")}getView(){return this._cardTitleEl.textContent=this._name,this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._setEventListeners(),this._cardElement}}class e{constructor({inputSelector:t,submitButtonSelector:e,inactiveButtonClass:s,inputErrorClass:n,errorClass:i},o){this._inputSelector=t,this._submitButtonSelector=e,this._inactiveButtonClass=s,this._inputErrorClass=n,this._errorClass=i,this._form=o,this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(e)}_showInputError(t){const e=this._form.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),e&&(e.textContent=t.validationMessage,e.classList.add(this._errorClass))}_hideInputError(t){const e=this._form.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),e&&(e.textContent="",e.classList.remove(this._errorClass))}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_hasInvalidInput(){return this._inputElements.some(t=>!t.validity.valid)}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_setEventListeners(){this._inputElements.forEach(t=>{t.addEventListener("input",()=>{this._checkInputValidity(t),this._toggleButtonState()})}),this._form.addEventListener("submit",t=>{t.preventDefault()}),this._toggleButtonState()}enableValidation(){this._setEventListeners()}resetValidation(){this._inputElements.forEach(t=>{this._hideInputError(t)}),this._toggleButtonState()}}class s{constructor(t){this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._popup.querySelector(".modal__close-button").addEventListener("click",()=>this.close()),this._popup.addEventListener("mousedown",t=>{t.target===this._popup&&this.close()})}}var n=class extends s{constructor(t,e){super(t),this._handleFormSubmit=e,this._form=this._popup.querySelector(".modal__form"),this._inputList=this._form.querySelectorAll(".modal__input")}_getInputValues(){const t={};return this._inputList.forEach(e=>{t[e.name]=e.value}),t}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()})}close(){super.close(),this._form.reset()}};const i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},o=document.querySelector("#open-edit-btn"),r=document.querySelector("#open-add-btn"),a=(document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector(".modal__input-type-title")),l=document.querySelector(".modal__input-type-description"),c=document.querySelector("#modal-edit-form"),u=document.querySelector("#modal-create-form"),_=new class{constructor({nameSelector:t,jobSelector:e}){this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(e)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo({name:t,job:e}){t&&(this._nameElement.textContent=t),e&&(this._jobElement.textContent=e)}}({nameSelector:".profile__title",jobSelector:".profile__description"}),d=new class{constructor({items:t,renderer:e},s){this._items=t,this._renderer=e,this._container=document.querySelector(s)}renderItems(){this._items.forEach(t=>{const e=this._renderer(t);this.addItem(e)})}addItem(t){this._container.prepend(t)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:t=>m(t)},".cards__list");function m(e){return new t(e,"#card-template",v).getView()}d.renderItems();const h=new class extends s{constructor(t){super(t),this._imageElement=this._popup.querySelector(".modal__image"),this._captionElement=this._popup.querySelector(".modal__image-caption")}open({name:t,link:e}){this._imageElement.src=e,this._imageElement.alt=t,this._captionElement.textContent=t,super.open()}}("#image-popup");h.setEventListeners();const p=new n("#modal-edit",t=>{_.setUserInfo({name:t.title,job:t.description})});p.setEventListeners();const E=new e(i,c);function v(t,e){h.open({name:t,link:e})}E.enableValidation(),new e(i,u).enableValidation();const S=new n("#modal-add",t=>{const e=m({name:t.title,link:t.link});d.addItem(e)});S.setEventListeners(),r.addEventListener("click",()=>{S.open()}),o.addEventListener("click",()=>{const t=_.getUserInfo();a.value=t.name,l.value=t.job,E.resetValidation(),p.open()})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,