!function(){"use strict";class e{constructor(e,t,s,n,r){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=n,this._handleLikeClick=r,this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button")}_setEventListeners(){this._likeButton.addEventListener("click",e=>{e.stopPropagation(),this._handleLikeClick(this._id,this._likeButton)}),this._deleteButton.addEventListener("click",e=>{e.stopPropagation(),this._handleDeleteClick(this._id,this._cardElement)}),this._cardElement.addEventListener("click",()=>{this._handleImageClick(this._name,this._link)})}_handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_active")}getView(){return this._cardTitleEl.textContent=this._name,this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._isLiked&&this._likeButton.classList.add("card__like-button_active"),this._setEventListeners(),this._cardElement}}class t{constructor({inputSelector:e,submitButtonSelector:t,inactiveButtonClass:s,inputErrorClass:n,errorClass:r},i){this._inputSelector=e,this._submitButtonSelector=t,this._inactiveButtonClass=s,this._inputErrorClass=n,this._errorClass=r,this._form=i,this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(t)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t&&(t.textContent=e.validationMessage,t.classList.add(this._errorClass))}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t&&(t.textContent="",t.classList.remove(this._errorClass))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_hasInvalidInput(){return this._inputElements.some(e=>!e.validity.valid)}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_setEventListeners(){this._inputElements.forEach(e=>{e.addEventListener("input",()=>{this._checkInputValidity(e),this._toggleButtonState()})}),this._form.addEventListener("submit",e=>{e.preventDefault()}),this._toggleButtonState()}enableValidation(){this._setEventListeners()}resetValidation(){this._inputElements.forEach(e=>{this._hideInputError(e)}),this._toggleButtonState()}}class s{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.querySelector(".modal__close-button").addEventListener("click",()=>this.close()),this._popup.addEventListener("mousedown",e=>{e.target===this._popup&&this.close()})}}var n=class extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector(".modal__form"),this._inputList=this._form.querySelectorAll(".modal__input"),this._submitButton=this._form.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}renderLoading(e,t="Saving..."){this._submitButton.textContent=e?t:this._submitButtonText}_getInputValues(){const e={};return this._inputList.forEach(t=>{e[t.name]=t.value}),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})}close(){super.close(),this._form.reset()}};const r={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},i=document.querySelector("#open-edit-btn"),o=document.querySelector("#open-add-btn"),a=document.querySelector(".profile__avatar-edit-button"),l=(document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector(".modal__input-type-title")),d=document.querySelector(".modal__input-type-description"),c=document.querySelector("#modal-edit-form"),h=document.querySelector("#modal-create-form"),_=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._handleResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._handleResponse)}updateUserInfo({name:e,about:t}){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._handleResponse)}addCard({name:e,link:t}){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._handleResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._handleResponse)}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"5cdcdfef-c3b6-49d6-830b-7f0207542704","Content-Type":"application/json"}}),u=new class{constructor({nameSelector:e,jobSelector:t,avatarSelector:s}){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo({name:e,job:t}){e&&(this._nameElement.textContent=e),t&&(this._jobElement.textContent=t)}setUserAvatar(e){this._avatarElement.src=e}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__avatar"}),m=new class{constructor({renderer:e},t){this._renderer=e,this._container=document.querySelector(t)}renderItems(e){e.forEach(e=>{const t=this._renderer(e);this.addItem(t)})}addItem(e){this._container.prepend(e)}}({renderer:e=>p(e)},".cards__list");function p(t){return new e(t,"#card-template",C,k,y).getView()}_.getAppInfo().then(([e,t])=>{u.setUserInfo({name:e.name,job:e.about}),m.renderItems(t),u.setUserAvatar(e.avatar)}).catch(e=>console.error(e));const E=new class extends s{constructor(e){super(e),this._imageElement=this._popup.querySelector(".modal__image"),this._captionElement=this._popup.querySelector(".modal__image-caption")}open({name:e,link:t}){this._imageElement.src=t,this._imageElement.alt=e,this._captionElement.textContent=e,super.open()}}("#image-popup");E.setEventListeners();const v=new n("#modal-edit",e=>{v.renderLoading(!0),_.updateUserInfo({name:e.title,about:e.description}).then(e=>{u.setUserInfo({name:e.name,job:e.about}),v.close()}).catch(e=>console.error(e)).finally(()=>{v.renderLoading(!1)})});v.setEventListeners();const b=new n("#modal-avatar",e=>{b.renderLoading(!0),_.updateAvatar(e.avatar).then(e=>{u.setUserAvatar(e.avatar),b.close()}).catch(e=>console.error(e)).finally(()=>{b.renderLoading(!1)})});b.setEventListeners(),a.addEventListener("click",()=>{b.open()});let f=null,L=null;const S=new class extends s{constructor(e,t){super(e),this._handleConfirm=t,this._form=this._popup.querySelector(".modal__form")}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",e=>{e.preventDefault(),this._handleConfirm()})}}("#delete-card-popup",e=>{_.deleteCard(f).then(()=>{L.remove(),S.close()}).catch(e=>console.error(e))});function k(e,t){f=e,L=t,S.open()}function y(e,t){t.classList.contains("card__like-button_active")?_.removeLike(e).then(e=>{t.classList.remove("card__like-button_active")}).catch(e=>console.error(e)):_.addLike(e).then(e=>{t.classList.add("card__like-button_active")}).catch(e=>console.error(e))}S.setEventListeners();const g=new t(r,c);function C(e,t){E.open({name:e,link:t})}g.enableValidation(),new t(r,h).enableValidation();const I=new n("#modal-add",e=>{_.addCard({name:e.title,link:e.link}).then(e=>{const t=p(e);m.addItem(t),I.close()}).catch(e=>{console.error("Failed to add card:",e)})});I.setEventListeners(),o.addEventListener("click",()=>{I.open()}),i.addEventListener("click",()=>{const e=u.getUserInfo();l.value=e.name,d.value=e.job,g.resetValidation(),v.open()})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,